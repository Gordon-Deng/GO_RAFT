// Code generated by protoc-gen-go. DO NOT EDIT.
// source: raft.proto

package raft

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// argument of RequestVote RPC
type RequestVoteArgs struct {
	Term                 int64    `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	CandidateId          int32    `protobuf:"varint,2,opt,name=CandidateId,proto3" json:"CandidateId,omitempty"`
	LastLogIndex         int64    `protobuf:"zigzag64,3,opt,name=LastLogIndex,proto3" json:"LastLogIndex,omitempty"`
	LastLogTerm          int64    `protobuf:"zigzag64,4,opt,name=LastLogTerm,proto3" json:"LastLogTerm,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteArgs) Reset()         { *m = RequestVoteArgs{} }
func (m *RequestVoteArgs) String() string { return proto.CompactTextString(m) }
func (*RequestVoteArgs) ProtoMessage()    {}
func (*RequestVoteArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{0}
}

func (m *RequestVoteArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteArgs.Unmarshal(m, b)
}
func (m *RequestVoteArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteArgs.Marshal(b, m, deterministic)
}
func (m *RequestVoteArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteArgs.Merge(m, src)
}
func (m *RequestVoteArgs) XXX_Size() int {
	return xxx_messageInfo_RequestVoteArgs.Size(m)
}
func (m *RequestVoteArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteArgs.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteArgs proto.InternalMessageInfo

func (m *RequestVoteArgs) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteArgs) GetCandidateId() int32 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogIndex() int64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteArgs) GetLastLogTerm() int64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

// reply of RequestVote RPC
type RequestVoteReply struct {
	Term                 int64    `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	VoteGranted          bool     `protobuf:"varint,2,opt,name=VoteGranted,proto3" json:"VoteGranted,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RequestVoteReply) Reset()         { *m = RequestVoteReply{} }
func (m *RequestVoteReply) String() string { return proto.CompactTextString(m) }
func (*RequestVoteReply) ProtoMessage()    {}
func (*RequestVoteReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{1}
}

func (m *RequestVoteReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RequestVoteReply.Unmarshal(m, b)
}
func (m *RequestVoteReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RequestVoteReply.Marshal(b, m, deterministic)
}
func (m *RequestVoteReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RequestVoteReply.Merge(m, src)
}
func (m *RequestVoteReply) XXX_Size() int {
	return xxx_messageInfo_RequestVoteReply.Size(m)
}
func (m *RequestVoteReply) XXX_DiscardUnknown() {
	xxx_messageInfo_RequestVoteReply.DiscardUnknown(m)
}

var xxx_messageInfo_RequestVoteReply proto.InternalMessageInfo

func (m *RequestVoteReply) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteReply) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

// argument of AppendEntries RPC
type AppendEntriesArgs struct {
	Term                 int64       `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId             int32       `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	PrevLogIndex         int64       `protobuf:"zigzag64,3,opt,name=PrevLogIndex,proto3" json:"PrevLogIndex,omitempty"`
	PrevLogTerm          int64       `protobuf:"zigzag64,4,opt,name=PrevLogTerm,proto3" json:"PrevLogTerm,omitempty"`
	LeaderCommit         int64       `protobuf:"zigzag64,5,opt,name=LeaderCommit,proto3" json:"LeaderCommit,omitempty"`
	Entries              []*LogEntry `protobuf:"bytes,6,rep,name=Entries,proto3" json:"Entries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *AppendEntriesArgs) Reset()         { *m = AppendEntriesArgs{} }
func (m *AppendEntriesArgs) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesArgs) ProtoMessage()    {}
func (*AppendEntriesArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{2}
}

func (m *AppendEntriesArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesArgs.Unmarshal(m, b)
}
func (m *AppendEntriesArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesArgs.Marshal(b, m, deterministic)
}
func (m *AppendEntriesArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesArgs.Merge(m, src)
}
func (m *AppendEntriesArgs) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesArgs.Size(m)
}
func (m *AppendEntriesArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesArgs.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesArgs proto.InternalMessageInfo

func (m *AppendEntriesArgs) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesArgs) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogIndex() int64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesArgs) GetPrevLogTerm() int64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesArgs) GetLeaderCommit() int64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

func (m *AppendEntriesArgs) GetEntries() []*LogEntry {
	if m != nil {
		return m.Entries
	}
	return nil
}

// reply of AppendEntries RPC
type AppendEntriesReply struct {
	Term                 int64    `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Success              bool     `protobuf:"varint,2,opt,name=Success,proto3" json:"Success,omitempty"`
	ConflictTerm         int64    `protobuf:"zigzag64,3,opt,name=ConflictTerm,proto3" json:"ConflictTerm,omitempty"`
	ConflictIndex        int64    `protobuf:"zigzag64,4,opt,name=ConflictIndex,proto3" json:"ConflictIndex,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AppendEntriesReply) Reset()         { *m = AppendEntriesReply{} }
func (m *AppendEntriesReply) String() string { return proto.CompactTextString(m) }
func (*AppendEntriesReply) ProtoMessage()    {}
func (*AppendEntriesReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{3}
}

func (m *AppendEntriesReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AppendEntriesReply.Unmarshal(m, b)
}
func (m *AppendEntriesReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AppendEntriesReply.Marshal(b, m, deterministic)
}
func (m *AppendEntriesReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AppendEntriesReply.Merge(m, src)
}
func (m *AppendEntriesReply) XXX_Size() int {
	return xxx_messageInfo_AppendEntriesReply.Size(m)
}
func (m *AppendEntriesReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AppendEntriesReply.DiscardUnknown(m)
}

var xxx_messageInfo_AppendEntriesReply proto.InternalMessageInfo

func (m *AppendEntriesReply) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesReply) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func (m *AppendEntriesReply) GetConflictTerm() int64 {
	if m != nil {
		return m.ConflictTerm
	}
	return 0
}

func (m *AppendEntriesReply) GetConflictIndex() int64 {
	if m != nil {
		return m.ConflictIndex
	}
	return 0
}

// argument for InstallSnapshot RPC
type InstallSnapshotArgs struct {
	Term                 int64    `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	LeaderId             int32    `protobuf:"varint,2,opt,name=LeaderId,proto3" json:"LeaderId,omitempty"`
	LastIncludedIndex    int64    `protobuf:"zigzag64,3,opt,name=LastIncludedIndex,proto3" json:"LastIncludedIndex,omitempty"`
	LastIncludedTerm     int64    `protobuf:"zigzag64,4,opt,name=LastIncludedTerm,proto3" json:"LastIncludedTerm,omitempty"`
	Data                 []byte   `protobuf:"bytes,5,opt,name=Data,proto3" json:"Data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallSnapshotArgs) Reset()         { *m = InstallSnapshotArgs{} }
func (m *InstallSnapshotArgs) String() string { return proto.CompactTextString(m) }
func (*InstallSnapshotArgs) ProtoMessage()    {}
func (*InstallSnapshotArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{4}
}

func (m *InstallSnapshotArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSnapshotArgs.Unmarshal(m, b)
}
func (m *InstallSnapshotArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSnapshotArgs.Marshal(b, m, deterministic)
}
func (m *InstallSnapshotArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSnapshotArgs.Merge(m, src)
}
func (m *InstallSnapshotArgs) XXX_Size() int {
	return xxx_messageInfo_InstallSnapshotArgs.Size(m)
}
func (m *InstallSnapshotArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSnapshotArgs.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSnapshotArgs proto.InternalMessageInfo

func (m *InstallSnapshotArgs) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *InstallSnapshotArgs) GetLeaderId() int32 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *InstallSnapshotArgs) GetLastIncludedIndex() int64 {
	if m != nil {
		return m.LastIncludedIndex
	}
	return 0
}

func (m *InstallSnapshotArgs) GetLastIncludedTerm() int64 {
	if m != nil {
		return m.LastIncludedTerm
	}
	return 0
}

func (m *InstallSnapshotArgs) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// reply for InstallSnapshot RPC
type InstallSnapshotReply struct {
	Term                 int64    `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *InstallSnapshotReply) Reset()         { *m = InstallSnapshotReply{} }
func (m *InstallSnapshotReply) String() string { return proto.CompactTextString(m) }
func (*InstallSnapshotReply) ProtoMessage()    {}
func (*InstallSnapshotReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{5}
}

func (m *InstallSnapshotReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InstallSnapshotReply.Unmarshal(m, b)
}
func (m *InstallSnapshotReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InstallSnapshotReply.Marshal(b, m, deterministic)
}
func (m *InstallSnapshotReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InstallSnapshotReply.Merge(m, src)
}
func (m *InstallSnapshotReply) XXX_Size() int {
	return xxx_messageInfo_InstallSnapshotReply.Size(m)
}
func (m *InstallSnapshotReply) XXX_DiscardUnknown() {
	xxx_messageInfo_InstallSnapshotReply.DiscardUnknown(m)
}

var xxx_messageInfo_InstallSnapshotReply proto.InternalMessageInfo

func (m *InstallSnapshotReply) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

// Raft's log entry
type LogEntry struct {
	Term                 int64    `protobuf:"zigzag64,1,opt,name=Term,proto3" json:"Term,omitempty"`
	Command              []byte   `protobuf:"bytes,2,opt,name=Command,proto3" json:"Command,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LogEntry) Reset()         { *m = LogEntry{} }
func (m *LogEntry) String() string { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()    {}
func (*LogEntry) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{6}
}

func (m *LogEntry) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogEntry.Unmarshal(m, b)
}
func (m *LogEntry) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogEntry.Marshal(b, m, deterministic)
}
func (m *LogEntry) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogEntry.Merge(m, src)
}
func (m *LogEntry) XXX_Size() int {
	return xxx_messageInfo_LogEntry.Size(m)
}
func (m *LogEntry) XXX_DiscardUnknown() {
	xxx_messageInfo_LogEntry.DiscardUnknown(m)
}

var xxx_messageInfo_LogEntry proto.InternalMessageInfo

func (m *LogEntry) GetTerm() int64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *LogEntry) GetCommand() []byte {
	if m != nil {
		return m.Command
	}
	return nil
}

type State struct {
	CurrentTerm          int64       `protobuf:"zigzag64,1,opt,name=CurrentTerm,proto3" json:"CurrentTerm,omitempty"`
	VotedFor             int32       `protobuf:"varint,2,opt,name=VotedFor,proto3" json:"VotedFor,omitempty"`
	LastIncludedIndex    int64       `protobuf:"zigzag64,3,opt,name=LastIncludedIndex,proto3" json:"LastIncludedIndex,omitempty"`
	LastIncludedTerm     int64       `protobuf:"zigzag64,4,opt,name=LastIncludedTerm,proto3" json:"LastIncludedTerm,omitempty"`
	Logs                 []*LogEntry `protobuf:"bytes,5,rep,name=Logs,proto3" json:"Logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *State) Reset()         { *m = State{} }
func (m *State) String() string { return proto.CompactTextString(m) }
func (*State) ProtoMessage()    {}
func (*State) Descriptor() ([]byte, []int) {
	return fileDescriptor_b042552c306ae59b, []int{7}
}

func (m *State) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_State.Unmarshal(m, b)
}
func (m *State) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_State.Marshal(b, m, deterministic)
}
func (m *State) XXX_Merge(src proto.Message) {
	xxx_messageInfo_State.Merge(m, src)
}
func (m *State) XXX_Size() int {
	return xxx_messageInfo_State.Size(m)
}
func (m *State) XXX_DiscardUnknown() {
	xxx_messageInfo_State.DiscardUnknown(m)
}

var xxx_messageInfo_State proto.InternalMessageInfo

func (m *State) GetCurrentTerm() int64 {
	if m != nil {
		return m.CurrentTerm
	}
	return 0
}

func (m *State) GetVotedFor() int32 {
	if m != nil {
		return m.VotedFor
	}
	return 0
}

func (m *State) GetLastIncludedIndex() int64 {
	if m != nil {
		return m.LastIncludedIndex
	}
	return 0
}

func (m *State) GetLastIncludedTerm() int64 {
	if m != nil {
		return m.LastIncludedTerm
	}
	return 0
}

func (m *State) GetLogs() []*LogEntry {
	if m != nil {
		return m.Logs
	}
	return nil
}

func init() {
	proto.RegisterType((*RequestVoteArgs)(nil), "raft.RequestVoteArgs")
	proto.RegisterType((*RequestVoteReply)(nil), "raft.RequestVoteReply")
	proto.RegisterType((*AppendEntriesArgs)(nil), "raft.AppendEntriesArgs")
	proto.RegisterType((*AppendEntriesReply)(nil), "raft.AppendEntriesReply")
	proto.RegisterType((*InstallSnapshotArgs)(nil), "raft.InstallSnapshotArgs")
	proto.RegisterType((*InstallSnapshotReply)(nil), "raft.InstallSnapshotReply")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*State)(nil), "raft.State")
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor_b042552c306ae59b) }

var fileDescriptor_b042552c306ae59b = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x54, 0xcd, 0x6e, 0x13, 0x31,
	0x10, 0xc6, 0x74, 0xd3, 0x46, 0x93, 0x94, 0xb6, 0xe6, 0x6f, 0xd9, 0x53, 0x64, 0x71, 0x88, 0x2a,
	0xd4, 0x43, 0xb9, 0x70, 0x42, 0xaa, 0x52, 0x7e, 0x82, 0xf6, 0x80, 0x1c, 0xc4, 0xdd, 0xc4, 0x4e,
	0x88, 0xb4, 0xb1, 0x17, 0x7b, 0x82, 0xe8, 0x3b, 0xc0, 0xd3, 0xf0, 0x08, 0x3c, 0x04, 0x3c, 0x0e,
	0xb2, 0x77, 0xb7, 0x72, 0x92, 0xdd, 0x0b, 0x12, 0x37, 0xcf, 0x37, 0xe3, 0xd9, 0xef, 0xfb, 0x66,
	0xbc, 0x00, 0x56, 0x2c, 0xf0, 0xa2, 0xb4, 0x06, 0x0d, 0x4d, 0xfc, 0x99, 0xfd, 0x20, 0x70, 0xc2,
	0xd5, 0x97, 0x8d, 0x72, 0xf8, 0xd1, 0xa0, 0xba, 0xb2, 0x4b, 0x47, 0x29, 0x24, 0x1f, 0x94, 0x5d,
	0xa7, 0x64, 0x44, 0xc6, 0x94, 0x87, 0x33, 0x1d, 0xc1, 0x60, 0x22, 0xb4, 0x5c, 0x49, 0x81, 0x6a,
	0x2a, 0xd3, 0xbb, 0x23, 0x32, 0xee, 0xf1, 0x18, 0xa2, 0x0c, 0x86, 0xb9, 0x70, 0x98, 0x9b, 0xe5,
	0x54, 0x4b, 0xf5, 0x2d, 0x3d, 0x08, 0xb7, 0xb7, 0x30, 0xdf, 0xa5, 0x8e, 0xc3, 0x07, 0x92, 0x50,
	0x12, 0x43, 0xec, 0x2d, 0x9c, 0x46, 0x74, 0xb8, 0x2a, 0x8b, 0x9b, 0x2e, 0x3e, 0xbe, 0xe0, 0x8d,
	0x15, 0x1a, 0x55, 0xc5, 0xa7, 0xcf, 0x63, 0x88, 0xfd, 0x26, 0x70, 0x76, 0x55, 0x96, 0x4a, 0xcb,
	0x57, 0x1a, 0xed, 0x4a, 0xb9, 0x4e, 0x6d, 0x19, 0xf4, 0x73, 0x25, 0xa4, 0xb2, 0xb7, 0xc2, 0x6e,
	0x63, 0xaf, 0xea, 0xbd, 0x55, 0x5f, 0x77, 0x55, 0xc5, 0x98, 0xe7, 0x52, 0xc7, 0xb1, 0xaa, 0x08,
	0x0a, 0xde, 0x84, 0x8e, 0x13, 0xb3, 0x5e, 0xaf, 0x30, 0xed, 0xd5, 0xde, 0x44, 0x18, 0x1d, 0xc3,
	0x51, 0x4d, 0x34, 0x3d, 0x1c, 0x1d, 0x8c, 0x07, 0x97, 0xf7, 0x2e, 0xc2, 0xb4, 0x72, 0xb3, 0xf4,
	0xf8, 0x0d, 0x6f, 0xd2, 0xec, 0x3b, 0x01, 0xba, 0xa5, 0xac, 0xdb, 0xa6, 0x14, 0x8e, 0x66, 0x9b,
	0xf9, 0x5c, 0x39, 0x57, 0x5b, 0xd4, 0x84, 0x9e, 0xd2, 0xc4, 0xe8, 0x45, 0xb1, 0x9a, 0x63, 0xb8,
	0x55, 0x0b, 0x8b, 0x31, 0xfa, 0x14, 0x8e, 0x9b, 0xb8, 0x52, 0x5f, 0x49, 0xdb, 0x06, 0xd9, 0x4f,
	0x02, 0xf7, 0xa7, 0xda, 0xa1, 0x28, 0x8a, 0x99, 0x16, 0xa5, 0xfb, 0x6c, 0xf0, 0x9f, 0xac, 0x7e,
	0x06, 0x67, 0x7e, 0x13, 0xa6, 0x7a, 0x5e, 0x6c, 0xa4, 0x92, 0xb1, 0xdf, 0xfb, 0x09, 0x7a, 0x0e,
	0xa7, 0x31, 0x18, 0x39, 0xbf, 0x87, 0x7b, 0x26, 0xd7, 0x02, 0x45, 0xb0, 0x7d, 0xc8, 0xc3, 0x99,
	0x9d, 0xc3, 0x83, 0x1d, 0xd2, 0x9d, 0x2e, 0xb2, 0x17, 0xd0, 0x6f, 0xa6, 0xd0, 0xe5, 0xb2, 0x1f,
	0xa2, 0xd0, 0x95, 0xa8, 0x21, 0x6f, 0x42, 0xf6, 0x8b, 0x40, 0x6f, 0x86, 0x02, 0x55, 0x78, 0x40,
	0x1b, 0x6b, 0x95, 0xc6, 0xe8, 0x7a, 0x0c, 0x79, 0x6f, 0xfc, 0xfe, 0xca, 0xd7, 0xc6, 0x36, 0xde,
	0x34, 0xf1, 0x7f, 0xf4, 0x86, 0x41, 0x92, 0x9b, 0xa5, 0x4b, 0x7b, 0xad, 0x3b, 0x17, 0x72, 0x97,
	0x7f, 0x08, 0x24, 0x5c, 0x2c, 0x90, 0xbe, 0x84, 0x41, 0xf4, 0x3a, 0xe9, 0xc3, 0xaa, 0x7a, 0xe7,
	0xff, 0x91, 0x3d, 0xda, 0x83, 0x83, 0xb5, 0xec, 0x0e, 0xbd, 0x86, 0xe3, 0xad, 0xc5, 0xa5, 0x8f,
	0xab, 0xd2, 0xbd, 0x77, 0x9a, 0xa5, 0x2d, 0x89, 0xa6, 0xcb, 0x3b, 0x38, 0xd9, 0x19, 0x1d, 0x7d,
	0x52, 0x95, 0xb7, 0xac, 0x61, 0x96, 0xb5, 0xa6, 0xea, 0x5e, 0x9f, 0x0e, 0xc3, 0xcf, 0xf0, 0xf9,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x57, 0xa5, 0xd3, 0xc3, 0x1a, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RaftClient is the client API for Raft service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RaftClient interface {
	// RequestVote RPC method, candidate use this method to request vote
	RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error)
	// AppendEntries RPC method, leader use this method to append entries or send heartbeat
	AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error)
	// InstallSnapshot RPC method, leader use this method to send snapshot to follower to save time and memory
	InstallSnapshot(ctx context.Context, in *InstallSnapshotArgs, opts ...grpc.CallOption) (*InstallSnapshotReply, error)
}

type raftClient struct {
	cc grpc.ClientConnInterface
}

func NewRaftClient(cc grpc.ClientConnInterface) RaftClient {
	return &raftClient{cc}
}

func (c *raftClient) RequestVote(ctx context.Context, in *RequestVoteArgs, opts ...grpc.CallOption) (*RequestVoteReply, error) {
	out := new(RequestVoteReply)
	err := c.cc.Invoke(ctx, "/raft.Raft/RequestVote", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) AppendEntries(ctx context.Context, in *AppendEntriesArgs, opts ...grpc.CallOption) (*AppendEntriesReply, error) {
	out := new(AppendEntriesReply)
	err := c.cc.Invoke(ctx, "/raft.Raft/AppendEntries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftClient) InstallSnapshot(ctx context.Context, in *InstallSnapshotArgs, opts ...grpc.CallOption) (*InstallSnapshotReply, error) {
	out := new(InstallSnapshotReply)
	err := c.cc.Invoke(ctx, "/raft.Raft/InstallSnapshot", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RaftServer is the server API for Raft service.
type RaftServer interface {
	// RequestVote RPC method, candidate use this method to request vote
	RequestVote(context.Context, *RequestVoteArgs) (*RequestVoteReply, error)
	// AppendEntries RPC method, leader use this method to append entries or send heartbeat
	AppendEntries(context.Context, *AppendEntriesArgs) (*AppendEntriesReply, error)
	// InstallSnapshot RPC method, leader use this method to send snapshot to follower to save time and memory
	InstallSnapshot(context.Context, *InstallSnapshotArgs) (*InstallSnapshotReply, error)
}

// UnimplementedRaftServer can be embedded to have forward compatible implementations.
type UnimplementedRaftServer struct {
}

func (*UnimplementedRaftServer) RequestVote(ctx context.Context, req *RequestVoteArgs) (*RequestVoteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestVote not implemented")
}
func (*UnimplementedRaftServer) AppendEntries(ctx context.Context, req *AppendEntriesArgs) (*AppendEntriesReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AppendEntries not implemented")
}
func (*UnimplementedRaftServer) InstallSnapshot(ctx context.Context, req *InstallSnapshotArgs) (*InstallSnapshotReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InstallSnapshot not implemented")
}

func RegisterRaftServer(s *grpc.Server, srv RaftServer) {
	s.RegisterService(&_Raft_serviceDesc, srv)
}

func _Raft_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).RequestVote(ctx, req.(*RequestVoteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).AppendEntries(ctx, req.(*AppendEntriesArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Raft_InstallSnapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InstallSnapshotArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServer).InstallSnapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.Raft/InstallSnapshot",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServer).InstallSnapshot(ctx, req.(*InstallSnapshotArgs))
	}
	return interceptor(ctx, in, info, handler)
}

var _Raft_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.Raft",
	HandlerType: (*RaftServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RequestVote",
			Handler:    _Raft_RequestVote_Handler,
		},
		{
			MethodName: "AppendEntries",
			Handler:    _Raft_AppendEntries_Handler,
		},
		{
			MethodName: "InstallSnapshot",
			Handler:    _Raft_InstallSnapshot_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}
